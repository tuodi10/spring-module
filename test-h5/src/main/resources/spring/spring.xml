<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:uitl="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
				         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				         http://www.springframework.org/schema/context
				         http://www.springframework.org/schema/context/spring-context-3.0.xsd
				         http://www.springframework.org/schema/tx
				         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				         http://mybatis.org/schema/mybatis-spring
       				     http://mybatis.org/schema/mybatis-spring.xsd
				         http://www.springframework.org/schema/aop
				         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/config.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="${mysql.url}"/>
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="30"/>
		<property name="minIdle" value="15"/>
		<property name="maxActive" value="200"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

		<property name="removeAbandoned" value="true"/> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800"/> <!-- 1800秒，也就是30分钟 , 关闭30分钟内没有使用的连接 -->
		<property name="logAbandoned" value="true"/> <!-- 关闭abanded连接时输出错误日志 -->

		<property name="filters" value="stat,log4j"/>
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
			</list>
		</property>
	</bean>
	<bean id="dataSourceRead" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="${mysql.read.url}"/>
		<property name="username" value="${mysql.read.username}" />
		<property name="password" value="${mysql.read.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="30"/>
		<property name="minIdle" value="15"/>
		<property name="maxActive" value="200"/>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"/>
		<property name="validationQuery" value="SELECT 'x'"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

		<property name="removeAbandoned" value="true"/> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800"/> <!-- 1800秒，也就是30分钟 , 关闭30分钟内没有使用的连接 -->
		<property name="logAbandoned" value="true"/> <!-- 关闭abanded连接时输出错误日志 -->

		<property name="filters" value="stat,log4j"/>
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter"/>
			</list>
		</property>
	</bean>

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="500"/>
		<property name="logSlowSql" value="true"/>
	</bean>

	<bean id="multipleDataSource" class="com.test.zero.config.MultipleDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- write -->
				<entry key="master" value-ref="dataSource"/>
				<!-- read -->
				<entry key="read" value-ref="dataSourceRead"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="multipleDataSource"/>
		<!-- <property name="configLocation" value="classpath*:sqlMapConfig.xml"/>  classpath后一要加个*-->
		<property name="mapperLocations">
			<list>
				<value>classpath*:mapper/*.xml</value>
		<!--<value>classpath*:com/test/zero/dal/mappers/**/*.xml</value>-->
    </list>
</property>
<property name="typeAliasesPackage"
          value="com.test.zero.model.entity"/>
</bean>

<bean id="sqlSessionFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
<property name="dataSource" ref="multipleDataSource"/>
<!-- <property name="configLocation" value="classpath*:sqlMapConfig.xml"/>  classpath后一要加个*-->
		<property name="mapperLocations">
			<list>
				<value>classpath*:mapper/*.xml</value>
				<!--<value>classpath*:com/hqbs/dal/mappers/**/*.xml</value>-->
			</list>
		</property>
		<property name="typeAliasesPackage"
				  value="com.test.zero.model.entity"/>
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>

	<bean id="sqlSessionTemplateRead" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryRead"/>
	</bean>

	<mybatis:scan base-package="com.test.zero.dal" factory-ref="sqlSessionFactory"/>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<bean id="stringHttpMessageConverter"
					  class="org.springframework.http.converter.StringHttpMessageConverter">
					<constructor-arg index="0">
						<value>UTF-8</value>
					</constructor-arg>
				</bean>
				<bean id="byteArrayHttpMessageConverter"
					  class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
				<bean id="formHttpMessageConverter"
					  class="org.springframework.http.converter.FormHttpMessageConverter"/>
				<bean id="sourceHttpMessageConverter"
					  class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/>
				<bean id="allEncompassingFormHttpMessageConverter"
					  class="org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter"/>
			</list>
		</property>
	</bean>


	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource"/>
	</bean>

	<bean id="txManagerRead" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="multipleDataSource"/>
	</bean>

	<bean id="manyDataSourceAspect" class="com.test.zero.config.MultipleDataSourceAspectAdvice"/>


	<tx:annotation-driven transaction-manager="txManager"/>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="insert*"/>
			<tx:method name="update*"/>
			<tx:method name="edit*"/>
			<tx:method name="delete*"/>
			<tx:method name="remove*"/>
			<tx:method name="add*"/>
			<tx:method name="set*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut
				expression="execution(* com.test.zero.service..*.*(..)) || execution(* com.test.zero.service..*.*(..))"
				id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" order="0"/>

		<aop:aspect id="manyAspect" ref="manyDataSourceAspect" order="-2147483647">
			<aop:pointcut id="manyTxPointcut" expression="execution(* com.test.zero.dal.*..*(..))"/>
			<aop:before pointcut-ref="manyTxPointcut" method="invoke"/>
		</aop:aspect>
	</aop:config>

</beans>